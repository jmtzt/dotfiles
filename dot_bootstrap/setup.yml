---
- name: Machine setup
  hosts: localhost
  connection: local
  become: true
  gather_facts: true

  vars:
    remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    # NodeSource repo (Node 22)
    nodesource_keyring_dir: /etc/apt/keyrings
    nodesource_key_asc: /etc/apt/keyrings/nodesource.asc
    nodesource_key_gpg: /etc/apt/keyrings/nodesource.gpg
    nodesource_repo_line: "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_22.x nodistro main"

    # Pin git clones (use tags/SHAs to satisfy ansible-lint latest[git])
    ohmyzsh_version: master
    tmux_repo_version: master
    zsh_autosuggest_version: master
    zsh_syntax_highlight_version: master
    zsh_fzf_hist_version: master
    fast_syntax_highlight_version: master
    nvim_config_version: main

  tasks:
    ###########################################################################
    # Base system prep
    ###########################################################################
    - name: Update apt cache (initial)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install base packages (includes zsh & zoxide)
      ansible.builtin.apt:
        name:
          - git
          - curl
          - htop
          - vim
          - build-essential
          - ripgrep
          - zsh
          - fzf
          - tmux
          - zlib1g
          - zlib1g-dev
          - patch
          - libssl-dev
          - luarocks
          - fd-find
          - direnv
          - tree
          - software-properties-common
          - openssh-client
          - ca-certificates
          - gnupg
          - zoxide
        state: present

    - name: Ensure fd is available as 'fd' on Debian/Ubuntu (symlink fdfind if present)
      ansible.builtin.stat:
        path: /usr/bin/fdfind
      register: fdfind_bin

    - name: Create fd symlink
      ansible.builtin.file:
        src: /usr/bin/fdfind
        dest: /usr/local/bin/fd
        state: link
      when:
        - ansible_facts['os_family'] == 'Debian'
        - fdfind_bin.stat.exists

    ###########################################################################
    # NodeSource repository setup (Node 22)
    ###########################################################################
    - name: Create keyrings directory
      ansible.builtin.file:
        path: "{{ nodesource_keyring_dir }}"
        state: directory
        mode: "0755"

    - name: Download NodeSource GPG key (ASCII)
      ansible.builtin.get_url:
        url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
        dest: "{{ nodesource_key_asc }}"
        mode: "0644"
        force: true
      notify: Convert NodeSource key to keyring

    - name: Ensure NodeSource GPG keyring exists (idempotent)
      ansible.builtin.command:
        cmd: "gpg --dearmor -o {{ nodesource_key_gpg }} {{ nodesource_key_asc }}"
        creates: "{{ nodesource_key_gpg }}"
      notify: Remove NodeSource ASCII key

    - name: Add NodeSource repository (Node 22)
      ansible.builtin.apt_repository:
        repo: "{{ nodesource_repo_line }}"
        filename: "nodesource"
        state: present
      notify: Update apt cache

    ###########################################################################
    # Git PPA (stable Git) and install
    ###########################################################################
    - name: Add Git PPA repository
      ansible.builtin.apt_repository:
        repo: ppa:git-core/ppa
        state: present
      notify: Update apt cache

    - name: Ensure Git is installed (no 'latest')
      ansible.builtin.apt:
        name: git
        state: present

    ###########################################################################
    # Configure Git for the regular user
    ###########################################################################
    - name: Configure global Git identity and signing
      become: true
      become_user: "{{ remote_regular_user }}"
      block:
        - name: Ensure ~/.gitconfig exists
          ansible.builtin.file:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.gitconfig"
            state: touch
            owner: "{{ remote_regular_user }}"
            group: "{{ remote_regular_user }}"
            mode: "0644"

        - name: Write Git config (managed block)
          ansible.builtin.blockinfile:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.gitconfig"
            marker: "# {mark} ANSIBLE MANAGED GIT CONFIG"
            create: true
            owner: "{{ remote_regular_user }}"
            group: "{{ remote_regular_user }}"
            mode: "0644"
            block: |
              [user]
                name = Joao Tozato
                email = joao.tozato@voize.de
                signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN52Pm/N1JReKh1ysY1h3xqP4XX6VxVk4H4ropc9vP52
              [gpg]
                format = ssh
              [commit]
                gpgsign = true

    ###########################################################################
    # Switch shell to zsh
    ###########################################################################
    - name: Change default shell to zsh for user
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    ###########################################################################
    # User-scope: Neovim under ~/.local
    ###########################################################################
    - name: Install Neovim under ~/.local
      become: true
      become_user: "{{ remote_regular_user }}"
      block:
        - name: Ensure ~/.local/{bin,opt} exist
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
          loop:
            - "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/bin"
            - "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/opt"

        - name: Download Neovim tarball
          ansible.builtin.get_url:
            url: "https://github.com/jmtzt/dotfiles/releases/download/nvim-0.12.0-dev-glibc231/nvim-linux-x86_64-glibc231.tar.gz"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/opt/nvim.tar.gz"
            mode: "0644"
            force: true
          register: nvim_tar
          notify: Remove previous extracted nvim

        - name: Create extraction dir
          ansible.builtin.file:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/opt/nvim"
            state: directory
            mode: "0755"

        - name: Extract Neovim tarball
          ansible.builtin.unarchive:
            src: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/opt/nvim.tar.gz"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/opt/nvim"
            remote_src: true
            extra_opts: [--no-same-owner]

        - name: Symlink nvim
          ansible.builtin.file:
            src: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/opt/nvim/bin/nvim"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/bin/nvim"
            state: link
            force: true

    ###########################################################################
    # User-scope: Fonts, Tmux, Zsh, Neovim config
    ###########################################################################
    - name: Setup fonts and dotfiles
      become: true
      become_user: "{{ remote_regular_user }}"
      block:
        - name: Ensure fonts dir
          ansible.builtin.file:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.fonts"
            state: directory
            mode: "0755"

        - name: Check if JetBrains Mono Nerd Font exists
          ansible.builtin.stat:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.fonts/JetBrainsMonoNerdFontMono-Regular.ttf"
          register: jetbrains_font

        - name: Download JetBrains Mono Nerd Font (if missing)
          ansible.builtin.unarchive:
            src: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.fonts/"
            remote_src: true
          when: not jetbrains_font.stat.exists

        - name: Clone Oh My Tmux
          ansible.builtin.git:
            repo: "https://github.com/gpakosz/.tmux.git"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.tmux"
            version: "{{ tmux_repo_version }}"
            depth: 1
            update: true

        - name: Symlink .tmux.conf
          ansible.builtin.file:
            src: "{{ lookup('ansible.builtin.env', 'HOME') }}/.tmux/.tmux.conf"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.tmux.conf"
            state: link
            force: true

        - name: Copy local tmux config if present
          ansible.builtin.stat:
            path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/share/chezmoi/dot_tmux.conf.local"
          register: tmux_local

        - name: Copy tmux.conf.local
          ansible.builtin.copy:
            src: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/share/chezmoi/dot_tmux.conf.local"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.tmux.conf.local"
            remote_src: true
            mode: "0644"
          when: tmux_local.stat.exists

        - name: Ensure custom zsh plugin dirs
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
          loop:
            - "{{ lookup('ansible.builtin.env', 'HOME') }}/.config/zsh/custom/plugins"
            - "{{ lookup('ansible.builtin.env', 'HOME') }}/.config/zsh/custom/themes"

        - name: Install Oh My Zsh and plugins
          loop:
            - { repo: "https://github.com/ohmyzsh/ohmyzsh.git", dest: "~/.oh-my-zsh" }
            - { repo: "https://github.com/zsh-users/zsh-autosuggestions.git", dest: "~/.config/zsh/custom/plugins/zsh-autosuggestions" }
            - { repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git", dest: "~/.config/zsh/custom/plugins/zsh-syntax-highlighting" }
            - { repo: "https://github.com/joshskidmore/zsh-fzf-history-search.git", dest: "~/.config/zsh/custom/plugins/zsh-fzf-history-search" }
            - { repo: "https://github.com/zdharma-continuum/fast-syntax-highlighting.git", dest: "~/.config/zsh/custom/plugins/fast-syntax-highlighting" }
          ansible.builtin.git:
            repo: "{{ item.repo }}"
            dest: "{{ item.dest | expanduser }}"
            depth: 1
            update: true

        - name: Clone Neovim config
          ansible.builtin.git:
            repo: "https://github.com/jmtzt/vim.git"
            dest: "{{ lookup('ansible.builtin.env', 'HOME') }}/.config/nvim"
            version: "{{ nvim_config_version }}"
            depth: 1
            update: true

  handlers:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true

    - name: Convert NodeSource key to keyring
      ansible.builtin.command:
        cmd: "gpg --dearmor -o {{ nodesource_key_gpg }} {{ nodesource_key_asc }}"
        creates: "{{ nodesource_key_gpg }}"

    - name: Remove NodeSource ASCII key
      ansible.builtin.file:
        path: "{{ nodesource_key_asc }}"
        state: absent

    - name: Remove previous extracted nvim
      ansible.builtin.file:
        path: "{{ lookup('ansible.builtin.env', 'HOME') }}/.local/opt/nvim"
        state: absent
