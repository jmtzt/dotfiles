---
- name: Machine setup
  hosts: localhost
  connection: local
  become: true
  gather_facts: true

  collections:
    - community.general

  tasks:
    ###########################################################################
    # Detect user
    ###########################################################################
    - name: Determine regular (non-root) user running this play
      ansible.builtin.set_fact:
        remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

    ###########################################################################
    # Base system prep
    ###########################################################################
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install base packages (includes zsh)
      ansible.builtin.apt:
        name:
          - git
          - curl
          - htop
          - vim
          - build-essential
          - ripgrep
          - zsh
          - fzf
          - tmux
          - zlib1g
          - zlib1g-dev
          - patch
          - libssl-dev
          - luarocks
          - fd-find
          - direnv
          - tree
          - software-properties-common
          - openssh-client
        state: present

    - name: Ensure fd is available as 'fd' on Debian/Ubuntu (symlink fdfind)
      ansible.builtin.file:
        src: /usr/bin/fdfind
        dest: /usr/local/bin/fd
        state: link
      when: ansible_facts['os_family'] == 'Debian'

    ###########################################################################
    # NodeSource repository setup
    ###########################################################################
    - name: Ensure Node.js repo dependencies are present
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Create /etc/apt/keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download NodeSource GPG key (ASCII)
      ansible.builtin.get_url:
        url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
        dest: /etc/apt/keyrings/nodesource.asc
        mode: "0644"
        force: true

    - name: Check if NodeSource GPG key already exists
      ansible.builtin.stat:
        path: /etc/apt/keyrings/nodesource.gpg
      register: nodesource_gpg

    - name: Dearmor NodeSource key
      ansible.builtin.command: >
        gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg /etc/apt/keyrings/nodesource.asc
      when: not nodesource_gpg.stat.exists

    - name: Remove ASCII key after dearmor
      ansible.builtin.file:
        path: /etc/apt/keyrings/nodesource.asc
        state: absent

    - name: Add NodeSource repository (Node 22)
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/nodesource.list
        line: "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_22.x nodistro main"
        create: true

    - name: Update apt cache after adding NodeSource
      ansible.builtin.apt:
        update_cache: true

    ###########################################################################
    # Git PPA (latest Git) and config
    ###########################################################################
    - name: Add Git PPA repository
      ansible.builtin.apt_repository:
        repo: ppa:git-core/ppa
        state: present
      register: git_ppa_added

    - name: Update apt cache after adding Git PPA
      ansible.builtin.apt:
        update_cache: true
      when: git_ppa_added.changed

    - name: Install/upgrade Git to latest version
      ansible.builtin.apt:
        name: git
        state: latest

    ###########################################################################
    # Configure Git for the regular user
    ###########################################################################
    - name: Configure global Git identity and SSH signing (user scope)
      become_user: "{{ remote_regular_user }}"
      block:
        - name: Set user.name / user.email / user.signingkey
          community.general.git_config:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            scope: global
          loop:
            - { name: "user.name",       value: "Joao Tozato" }
            - { name: "user.email",      value: "joao.tozato@voize.de" }
            - { name: "user.signingkey", value: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN52Pm/N1JReKh1ysY1h3xqP4XX6VxVk4H4ropc9vP52" }

        - name: Set gpg.format to ssh and enable commit signing
          community.general.git_config:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            scope: global
          loop:
            - { name: "gpg.format",     value: "ssh" }
            - { name: "commit.gpgsign", value: "true" }

    ###########################################################################
    # Switch shell to zsh
    ###########################################################################
    - name: Change default shell to zsh for {{ remote_regular_user }}
      ansible.builtin.user:
        name: "{{ remote_regular_user }}"
        shell: /usr/bin/zsh

    ###########################################################################
    # User-scope: Neovim under ~/.local and developer tooling
    ###########################################################################
    - name: Install Neovim under ~/.local (user scope)
      become_user: "{{ remote_regular_user }}"
      block:
        - name: Ensure ~/.local/{bin,opt} exist
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
          loop:
            - "~/.local/bin"
            - "~/.local/opt"

        - name: Download Neovim binary tarball from GitHub release
          ansible.builtin.get_url:
            url: "https://github.com/jmtzt/dotfiles/releases/download/nvim-0.12.0-dev-glibc231/nvim-linux-x86_64-glibc231.tar.gz"
            dest: "~/.local/opt/nvim.tar.gz"
            mode: "0644"
            force: true
          register: nvim_tar

        - name: Remove previous extracted nvim (if new tarball downloaded)
          ansible.builtin.file:
            path: "~/.local/opt/nvim"
            state: absent
          when: nvim_tar.changed

        - name: Create ~/.local/opt/nvim (extract target)
          ansible.builtin.file:
            path: "~/.local/opt/nvim"
            state: directory
            mode: "0755"

        - name: Extract Neovim tarball (bin/ and share/ at root)
          ansible.builtin.unarchive:
            src: "~/.local/opt/nvim.tar.gz"
            dest: "~/.local/opt/nvim"
            remote_src: true
            extra_opts: [--no-same-owner]

        - name: Symlink nvim into ~/.local/bin
          ansible.builtin.file:
            src: "~/.local/opt/nvim/bin/nvim"
            dest: "~/.local/bin/nvim"
            state: link
            force: true

    ###########################################################################
    # User-scope: Fonts, Tmux, zoxide, Oh My Zsh & plugins, Neovim config
    ###########################################################################
    - name: Setup fonts, Tmux, and apply dotfiles
      become_user: "{{ remote_regular_user }}"
      block:
        - name: Ensure fonts directory exists
          ansible.builtin.file:
            path: "~/.fonts"
            state: directory
            mode: "0755"

        - name: Check if JetBrains Mono Nerd Font exists
          ansible.builtin.stat:
            path: "~/.fonts/JetBrainsMonoNerdFontMono-Regular.ttf"
          register: jetbrains_mono_exists

        - name: Download and unpack JetBrains Mono Nerd Font
          ansible.builtin.unarchive:
            src: "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip"
            dest: "~/.fonts/"
            remote_src: true
          when: not jetbrains_mono_exists.stat.exists

        - name: Clone Oh My Tmux repository
          ansible.builtin.git:
            repo: "https://github.com/gpakosz/.tmux.git"
            dest: "~/.tmux"
            clone: true
            update: true
            depth: 1

        - name: Create symlink for the main .tmux.conf
          ansible.builtin.file:
            src: "~/.tmux/.tmux.conf"
            dest: "~/.tmux.conf"
            state: link
            force: true

        - name: Copy custom tmux config from chezmoi source if present
          ansible.builtin.copy:
            src: "~/.local/share/chezmoi/dot_tmux.conf.local"
            dest: "~/.tmux.conf.local"
            remote_src: true
            force: true
            mode: "0644"
          ignore_errors: true

        - name: Install zoxide via official script (idempotent by creates)
          ansible.builtin.shell: |
            curl -sSfL https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | sh
          args:
            creates: "~/.local/bin/zoxide"
            executable: /bin/bash

        - name: Ensure custom zsh plugin/theme dirs exist
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
          loop:
            - "~/.config/zsh/custom/plugins"
            - "~/.config/zsh/custom/themes"

        - name: Install Oh My Zsh (via git clone)
          ansible.builtin.git:
            repo: "https://github.com/ohmyzsh/ohmyzsh.git"
            dest: "~/.oh-my-zsh"
            depth: 1
            update: true

        - name: Install zsh-autosuggestions plugin
          ansible.builtin.git:
            repo: "https://github.com/zsh-users/zsh-autosuggestions.git"
            dest: "~/.config/zsh/custom/plugins/zsh-autosuggestions"
            depth: 1
            update: true

        - name: Install zsh-syntax-highlighting plugin
          ansible.builtin.git:
            repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
            dest: "~/.config/zsh/custom/plugins/zsh-syntax-highlighting"
            depth: 1
            update: true

        - name: Install zsh-fzf-history-search plugin
          ansible.builtin.git:
            repo: "https://github.com/joshskidmore/zsh-fzf-history-search.git"
            dest: "~/.config/zsh/custom/plugins/zsh-fzf-history-search"
            depth: 1
            update: true

        - name: Install fast-syntax-highlighting plugin
          ansible.builtin.git:
            repo: "https://github.com/zdharma-continuum/fast-syntax-highlighting.git"
            dest: "~/.config/zsh/custom/plugins/fast-syntax-highlighting"
            depth: 1
            update: true

        - name: Clone Neovim config repo
          ansible.builtin.git:
            repo: "https://github.com/jmtzt/vim.git"
            dest: "~/.config/nvim"
            version: main
            depth: 1
            update: true

