{{- /* ~/.zshrc (chezmoi template) */ -}}

# Oh My Zsh core
export ZSH="$HOME/.oh-my-zsh"
export ZSH_CUSTOM="$HOME/.config/zsh/custom"
ZSH_THEME="mitsuhiko"

# Plugins (must be installed/cloned under $ZSH_CUSTOM/plugins or oh-my-zsh/plugins)
plugins=(
  git git-prompt
  zsh-fzf-history-search
  zsh-autosuggestions
  fast-syntax-highlighting
  zsh-syntax-highlighting
  mercurial
  better-virtualenv
  direnv
  # optional: transportstatus idasen-control multirust
)

# Load oh-my-zsh
source $ZSH/oh-my-zsh.sh

# --- Aliases ---
alias kc="kubectl"
alias oc="opencode"
alias ns="kubens | fzf | xargs -I {} kubens {}"
alias ctx="kubectx | fzf | xargs -I {} kubectx {}"
alias ctl="kubectl get pods | fzf | awk '{print \$1}' | xargs -I {} kubectl exec -it {} -- /bin/sh"
alias cops="gh copilot suggest"
alias cope="gh copilot explain"
alias ca="conda activate "
alias cde="conda deactivate"
alias n="nnn"
alias vim="nvim"
alias t="tree --gitignore"
alias leet="vim leetcode.nvim"
alias av="source .venv/bin/activate"
alias todo="vim ~/work/todo.md"
alias lzd='lazydocker'

# fd alias for Ubuntu (package name: fdfind)
command -v fdfind >/dev/null 2>&1 && alias fd="fdfind"

# --- Completion cache ---
autoload -Uz compinit
if [ ! -f "$HOME/.zcompdump" ] || find "$HOME/.zcompdump" -mtime +1 >/dev/null 2>&1; then
  compinit
else
  compinit -C
fi

# --- Tools integration ---
eval "$(thefuck --alias 2>/dev/null || true)"
eval "$(direnv hook zsh)"
if command -v zoxide >/dev/null 2>&1; then
  eval "$(zoxide init --cmd cd zsh)"
fi

# zsh plugin extras (autosuggestions, syntax highlighting)
[ -f "$ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ] && source "$ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
[ -f "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ] && source "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

# --- Env vars ---
export EDITOR="nvim"
export HIST_STAMPS="yyyy-mm-dd"
unsetopt share_history
export LC_ALL=en_US.UTF-8

# Core paths
export PATH="$HOME/.local/bin:$HOME/.cargo/bin:${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# VCPKG
export VCPKG_ROOT="$HOME/vcpkg"
export PATH="$PATH:$VCPKG_ROOT"

# Gradle
export GRADLE_USER_HOME="$HOME/.gradle"
export GRADLE_HOME="$HOME/.gradle"

# Brew wrapper (mac only, sketchybar hook)
function brew() {
  command brew "$@" 
  if [[ $* =~ "upgrade" ]] || [[ $* =~ "update" ]] || [[ $* =~ "outdated" ]]; then
    {{ if eq .chezmoi.os "darwin" }}sketchybar --trigger brew_update{{ end }}
  fi
}

# --- OS-specific ---
{{ if eq .chezmoi.os "darwin" }}
  export HOMEBREW_NO_AUTO_UPDATE=1
  export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"

  # macOS 1Password agent
  export SSH_AUTH_SOCK="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"

  # Android SDK
  export ANDROID_HOME="$HOME/Library/Android/sdk"
  export ANDROID_SDK_ROOT="$ANDROID_HOME"
  export PATH="$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin"
{{ else if eq .chezmoi.os "linux" }}
  # Linux Android SDK (if installed)
  export ANDROID_HOME="$HOME/Android/Sdk"
  export ANDROID_SDK_ROOT="$ANDROID_HOME"
  [ -d "$ANDROID_HOME" ] && export PATH="$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/platform-tools:$ANDROID_HOME/cmdline-tools/latest/bin"
{{ end }}

# Project-local env (optional)
[ -f "$HOME/.local/bin/env" ] && . "$HOME/.local/bin/env"

# SDKMAN (if installed)
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"
